using GLib;
using Gee;
using Json;
using Woocommerce;
using SinticBolivia;
using SinticBolivia.Database;

namespace SinticBolivia
{
	class SBWCSync : SBSynchronizer
	{
		protected	WC_Api_Client _api;
		
		public SBWCSync(string wp_url, string api_key, string api_secret)
		{
			this._api = new WC_Api_Client(wp_url, api_key, api_secret);
		}
		public override long SyncCategories()
		{
			var dbh = (SBDatabase)SBGlobals.GetVar("dbh");
			long records = 0;
			this._api.debug = true;
			Json.Object obj = this._api.GetCategories();
			dbh.BeginTransaction();
			foreach(var node in obj.get_array_member("categories").get_elements())
			{
				var category = node.get_object();
				string cat_id = category.get_string_member("term_id");
				string query = "SELECT category_id FROM categories WHERE extern_id = %s".printf(cat_id);
				stdout.printf("=> %s\n", query);
				long res = dbh.Query(query);
				if( res > 0 )
				{
					continue;
				}
				//##insert category into database
				HashMap<string, Value?> data = new HashMap<string, Value?>();
				data.set("name", category.get_string_member("name"));
				data.set("description", "");
				data.set("parent", 0);
				data.set("creation_date", "");
				data.set("extern_id", cat_id);
				
				dbh.Insert("categories", data);
			}
			dbh.EndTransaction();
			return records;
		}
		public override long SyncProducts()
		{
			long records = 0;
			var dbh = (SBDatabase)SBGlobals.GetVar("dbh");
			//this._api.debug = true;
			Json.Object products = this._api.GetProducts();
			try
			{
				if( products.has_member("errors") )
				{
					/*
					var error = products.get_array_member("errors").get_element(0).get_object();
					MessageDialog msg = new MessageDialog(null, DialogFlags.MODAL, MessageType.ERROR, ButtonsType.CLOSE, 
													error.get_string_member("message"));
					msg.run();
					msg.destroy();
					return null;
					*/
				}
				int total_pages = (int)products.get_int_member("total_pages");
				records = (long)products.get_int_member("total_products");
				stdout.printf ("\ntotal products %ld:\n", records);
				stdout.printf ("total pages %d:\n", total_pages);
				dbh.BeginTransaction();
				string q = "DELETE FROM product2category;";
				dbh.Execute(q);
				for(int page = 1; page <= total_pages; page++)
				{
					if( page > 1 )
					{
						products = this._api.GetProducts(50, page);
					}
					stdout.printf ("Synchronizing page: %d\n", page);
					foreach (var geonode in products.get_array_member("products").get_elements ()) 
					{
						Json.Object product	= geonode.get_object ();
						int64 pid = product.get_int_member("id");
						double price = double.parse(product.get_string_member ("price"));
						int	qty	= (int)product.get_int_member("stock_quantity");
						string query = "SELECT product_id FROM products WHERE extern_id = %s LIMIT 1".printf(pid.to_string());
						long res = dbh.Query(query);
						long product_id = 0;
						
						if( res > 0 )
						{
							product_id = int.parse(dbh.Rows[0].Get("product_id"));
							//TODO:update product stock
							query = "UPDATE products SET product_quantity = %d WHERE extern_id = %d LIMIT 1".printf(qty, (int)pid);
						}
						else
						{
							Json.Array images 	= product.get_array_member("images");
							Json.Object image 	= images.get_element(0).get_object();
							string image_url 	= image.get_string_member("src").strip();
							string image_name	= File.new_for_uri(image_url).get_basename();
							string[] parts		= SBFileHelper.GetParts(image_name);
							string ext			= parts[1];
							//stdout.printf("name:%s, extension: %s\n", parts[0], parts[1]);
							uint8[] buffer;
							SBWeb.RequestData(image.get_string_member("src"), out buffer);
							string image_path = SBFileHelper.SanitizePath("images/");
							string thumbnail	= "%s-80x80.%s".printf(parts[0], parts[1]);
							FileUtils.set_data(image_path + image_name, buffer);
							var pixbuf = new Gdk.Pixbuf.from_file_at_scale(image_path + image_name, 80, 80, true);
							pixbuf.save(image_path + thumbnail, (ext == "jpg") ? "jpeg" : ext, "quality", 100);
							
							//var prod_pixbuf = new Gdk.Pixbuf.from_inline(buffer);
							//var prod_pixbuf = new Gdk.Pixbuf.from_file_at_scale("test.png", 80, 80, true);
							
							HashMap<string, Value?> row = new HashMap<string, Value?>();
							
							row.set("extern_id", pid); 
							row.set("product_name", product.get_string_member ("title")); 
							row.set("product_quantity", qty); 
							row.set("product_price", price);
							//row.set("image", new Gdk.Pixbuf.from_file("share/images/add-icon.png"));
							//##insert record
							product_id = dbh.Insert("products", row);
							string query_images = "INSERT INTO attachments(object_type,object_id,type,mime,file) VALUES"+
													@"('Product',$product_id,'image', '$ext', '$image_name'),"+
													@"('Product',$product_id,'image_thumbnail', '$ext', '$thumbnail')";
							dbh.Execute(query_images);
						}
						//set product categories
						foreach(var cat_node in product.get_array_member("categories_ids").get_elements())
						{
							int xcat_id = (int)cat_node.get_int();
							query = "SELECT category_id FROM categories WHERE extern_id = %d".printf(xcat_id);
							res = dbh.Query(query);
							if( res > 0 )
							{
								int icat_id = int.parse(dbh.Rows[0].Get("category_id"));
								query = "INSERT INTO product2category(product_id,category_id) VALUES(%ld,%d)".printf(product_id, icat_id);
								dbh.Execute(query);
							}
						}
					}
				}
				dbh.EndTransaction();				
			}
			catch(Error e)
			{
				stderr.printf ("Error: %s\n", e.message);
			}
			
			return records;
		}
		public void SyncCustomers()
		{
			
		}
	}
}
